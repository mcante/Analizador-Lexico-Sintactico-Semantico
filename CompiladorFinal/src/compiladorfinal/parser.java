
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Jun 07 23:21:38 CST 2018
//----------------------------------------------------

package compiladorfinal;

import java.util.LinkedList;
import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Jun 07 23:21:38 CST 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\032\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\007\000\002\004\011" +
    "\000\002\004\011\000\002\004\015\000\002\004\003\000" +
    "\002\005\005\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\006\003\000\002\006\003\000\002\007" +
    "\005\000\002\007\005\000\002\007\005\000\002\007\005" +
    "\000\002\007\005\000\002\007\005\000\002\007\003\000" +
    "\002\007\003\000\002\010\005\000\002\010\005\000\002" +
    "\010\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\071\000\012\003\010\025\011\026\004\027\006\001" +
    "\002\000\004\005\066\001\002\000\016\002\ufffe\003\ufffe" +
    "\010\ufffe\025\ufffe\026\ufffe\027\ufffe\001\002\000\004\005" +
    "\054\001\002\000\014\002\000\003\010\025\011\026\004" +
    "\027\006\001\002\000\016\002\ufff9\003\ufff9\010\ufff9\025" +
    "\ufff9\026\ufff9\027\ufff9\001\002\000\004\005\014\001\002" +
    "\000\004\002\013\001\002\000\004\002\001\001\002\000" +
    "\016\005\021\021\022\022\020\023\016\024\017\031\026" +
    "\001\002\000\010\006\ufff3\017\047\020\050\001\002\000" +
    "\010\006\uffec\017\uffec\020\uffec\001\002\000\004\006\ufff4" +
    "\001\002\000\024\006\ufff6\011\ufff6\012\ufff6\013\ufff6\014" +
    "\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6\001\002\000\012" +
    "\005\021\021\022\022\020\031\026\001\002\000\024\006" +
    "\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7\015\ufff7\016\ufff7" +
    "\017\ufff7\020\ufff7\001\002\000\024\006\uffeb\011\032\012" +
    "\031\013\035\014\033\015\034\016\036\017\uffeb\020\uffeb" +
    "\001\002\000\004\006\027\001\002\000\010\006\uffe8\017" +
    "\uffe8\020\uffe8\001\002\000\024\006\ufff5\011\ufff5\012\ufff5" +
    "\013\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5\001" +
    "\002\000\004\004\030\001\002\000\016\002\ufffd\003\ufffd" +
    "\010\ufffd\025\ufffd\026\ufffd\027\ufffd\001\002\000\012\005" +
    "\021\021\022\022\020\031\026\001\002\000\012\005\021" +
    "\021\022\022\020\031\026\001\002\000\012\005\021\021" +
    "\022\022\020\031\026\001\002\000\012\005\021\021\022" +
    "\022\020\031\026\001\002\000\012\005\021\021\022\022" +
    "\020\031\026\001\002\000\012\005\021\021\022\022\020" +
    "\031\026\001\002\000\010\006\uffed\017\uffed\020\uffed\001" +
    "\002\000\010\006\uffef\017\uffef\020\uffef\001\002\000\010" +
    "\006\uffee\017\uffee\020\uffee\001\002\000\010\006\ufff0\017" +
    "\ufff0\020\ufff0\001\002\000\010\006\ufff1\017\ufff1\020\ufff1" +
    "\001\002\000\010\006\ufff2\017\ufff2\020\ufff2\001\002\000" +
    "\004\006\046\001\002\000\024\006\ufff8\011\ufff8\012\ufff8" +
    "\013\ufff8\014\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8\001" +
    "\002\000\014\005\021\021\022\022\020\023\016\031\026" +
    "\001\002\000\014\005\021\021\022\022\020\023\016\031" +
    "\026\001\002\000\010\006\uffea\017\uffea\020\uffea\001\002" +
    "\000\010\006\uffe9\017\uffe9\020\050\001\002\000\016\002" +
    "\uffff\003\uffff\010\uffff\025\uffff\026\uffff\027\uffff\001\002" +
    "\000\014\005\021\021\022\022\020\023\016\031\026\001" +
    "\002\000\010\006\056\017\047\020\050\001\002\000\004" +
    "\007\057\001\002\000\012\003\010\025\011\026\004\027" +
    "\006\001\002\000\014\003\010\010\061\025\011\026\004" +
    "\027\006\001\002\000\020\002\ufffb\003\ufffb\010\ufffb\025" +
    "\ufffb\026\ufffb\027\ufffb\030\062\001\002\000\004\007\063" +
    "\001\002\000\012\003\010\025\011\026\004\027\006\001" +
    "\002\000\014\003\010\010\065\025\011\026\004\027\006" +
    "\001\002\000\016\002\ufffa\003\ufffa\010\ufffa\025\ufffa\026" +
    "\ufffa\027\ufffa\001\002\000\014\005\021\021\022\022\020" +
    "\023\016\031\026\001\002\000\010\006\070\017\047\020" +
    "\050\001\002\000\004\007\071\001\002\000\012\003\010" +
    "\025\011\026\004\027\006\001\002\000\014\003\010\010" +
    "\073\025\011\026\004\027\006\001\002\000\016\002\ufffc" +
    "\003\ufffc\010\ufffc\025\ufffc\026\ufffc\027\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\071\000\010\002\011\003\006\004\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\005\022\006\023" +
    "\007\024\010\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\043\001\001\000\004\005" +
    "\042\001\001\000\004\005\041\001\001\000\004\005\040" +
    "\001\001\000\004\005\037\001\001\000\004\005\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\005\022\007\024" +
    "\010\051\001\001\000\010\005\022\007\024\010\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\005\022\007\024\010\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\057\004\004\001\001" +
    "\000\004\004\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\003\063\004\004\001\001\000\004\004\052" +
    "\001\001\000\002\001\001\000\010\005\022\007\024\010" +
    "\066\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\071\004\004\001\001\000\004\004\052\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public static Nodo padre;
	public int contador=0;

	//Listas para almacenar las PALABRAS RESERVADAS, SIMBOLOS, CADENAS Y VALORES NUMÉRICOS
	public static LinkedList<String> PalabraReservada = new LinkedList<String>();
	public static LinkedList<String> Simbolo = new LinkedList<String>();
	public static LinkedList<String> Cadenas = new LinkedList<String>();
  public static LinkedList<String> Variables = new LinkedList<String>();
	public static LinkedList<String> ValoresNumericos = new LinkedList<String>();
	
  public static LinkedList<String> Errores = new LinkedList<String>();

    
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
            System.err.println("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+".");
            parser.Errores.add("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+". \n");
    } 
    /**
     * Método al que se llama en el momento en que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
            System.err.println("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido."); 
            parser.Errores.add("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+". \n");
    }  

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXPRE_LOGICA ::= EXPRE_COMPARACION 
            {
              Object RESULT =null;
		int comparacionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int comparacionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object comparacion = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

    Nodo tmp = new Nodo("EXPRESION");
    tmp.setIdNod(parser.contador++);
    tmp.AddHijos((Nodo) comparacion);
    RESULT=tmp;

  	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE_LOGICA",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EXPRE_LOGICA ::= EXPRE_LOGICA and EXPRE_LOGICA 
            {
              Object RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

    Nodo tmp = new Nodo("LOGICA");
    tmp.setIdNod(parser.contador++);
    tmp.setValor(" and ");
    
    tmp.AddHijos((Nodo) s1);
    tmp.AddHijos((Nodo) s2);

    RESULT=tmp;

 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE_LOGICA",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EXPRE_LOGICA ::= EXPRE_LOGICA or EXPRE_LOGICA 
            {
              Object RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

    Nodo tmp = new Nodo("LOGICA");
    tmp.setIdNod(parser.contador++);
    tmp.setValor(" or ");
    
    tmp.AddHijos((Nodo) s1);
    tmp.AddHijos((Nodo) s2);

    RESULT=tmp;

 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE_LOGICA",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EXPRE_COMPARACION ::= EXPRE_NUMERICA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE_COMPARACION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EXPRE_COMPARACION ::= bool 
            {
              Object RESULT =null;
		int logicaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int logicaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String logica = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

 	parser.Simbolo.add(logica);

    Nodo tmp = new Nodo("BOOLEAN");
    tmp.setIdNod(parser.contador++);
    tmp.setValor(logica);
    RESULT=tmp;

 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE_COMPARACION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EXPRE_COMPARACION ::= EXPRE_NUMERICA diferente EXPRE_NUMERICA 
            {
              Object RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

 	parser.Simbolo.add(" != ");

    Nodo tmp = new Nodo("COMPARACION");
    tmp.setIdNod(parser.contador++);
    tmp.setValor(" != ");

    tmp.AddHijos((Nodo) s1);
    tmp.AddHijos((Nodo) s2);

    RESULT=tmp;

 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE_COMPARACION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EXPRE_COMPARACION ::= EXPRE_NUMERICA cigual EXPRE_NUMERICA 
            {
              Object RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

 	parser.Simbolo.add(" == ");

    Nodo tmp = new Nodo("COMPARACION");
    tmp.setIdNod(parser.contador++);
    tmp.setValor(" == ");
    
    tmp.AddHijos((Nodo) s1);
    tmp.AddHijos((Nodo) s2);

    RESULT=tmp;

 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE_COMPARACION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // EXPRE_COMPARACION ::= EXPRE_NUMERICA menoigual EXPRE_NUMERICA 
            {
              Object RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

 	parser.Simbolo.add(" >= ");

    Nodo tmp = new Nodo("COMPARACION");
    tmp.setIdNod(parser.contador++);
    tmp.setValor(" <= ");
    
    tmp.AddHijos((Nodo) s1);
    tmp.AddHijos((Nodo) s2);

    RESULT=tmp;

 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE_COMPARACION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // EXPRE_COMPARACION ::= EXPRE_NUMERICA mayoigual EXPRE_NUMERICA 
            {
              Object RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

 	parser.Simbolo.add(" >= ");

    Nodo tmp = new Nodo("COMPARACION");
    tmp.setIdNod(parser.contador++);
    tmp.setValor(" >= ");
    
    tmp.AddHijos((Nodo) s1);
    tmp.AddHijos((Nodo) s2);

    RESULT=tmp;

 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE_COMPARACION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // EXPRE_COMPARACION ::= EXPRE_NUMERICA menque EXPRE_NUMERICA 
            {
              Object RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

 	parser.Simbolo.add(" < ");

    Nodo tmp = new Nodo("COMPARACION");
    tmp.setIdNod(parser.contador++);
    tmp.setValor(" < ");
    
    tmp.AddHijos((Nodo) s1);
    tmp.AddHijos((Nodo) s2);

    RESULT=tmp;

 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE_COMPARACION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // EXPRE_COMPARACION ::= EXPRE_NUMERICA mayque EXPRE_NUMERICA 
            {
              Object RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

   	parser.Simbolo.add(" > ");

    Nodo tmp = new Nodo("COMPARACION");
    tmp.setIdNod(parser.contador++);
    tmp.setValor(" > ");
    
    tmp.AddHijos((Nodo) s1);
    tmp.AddHijos((Nodo) s2);

    RESULT=tmp;

 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE_COMPARACION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // EXPRE_CADENA ::= EXPRE_LOGICA 
            {
              Object RESULT =null;
		int logicaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int logicaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object logica = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

    Nodo tmp = new Nodo("BOOLEAN");
    tmp.setIdNod(parser.contador++);
    tmp.AddHijos((Nodo) logica);
    RESULT=tmp;

 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE_CADENA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // EXPRE_CADENA ::= cadena 
            {
              Object RESULT =null;
		int textoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String texto = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    parser.Cadenas.add(texto);

    Nodo tmp = new Nodo("TEXTO");
    tmp.setIdNod(parser.contador++);
    tmp.setValor(texto);
    RESULT=tmp;

  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE_CADENA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // EXPRE_NUMERICA ::= identificador 
            {
              Object RESULT =null;
		int identileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String identi = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    parser.Variables.add(identi); 

    Nodo tmp = new Nodo("IDENTIFICADOR");
    tmp.setIdNod(parser.contador++);
    tmp.setValor(identi);
    RESULT=tmp;

  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE_NUMERICA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // EXPRE_NUMERICA ::= decimal 
            {
              Object RESULT =null;
		int numDecimalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numDecimalright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String numDecimal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    parser.ValoresNumericos.add(numDecimal); 

    Nodo tmp = new Nodo("DECIMAL");
    tmp.setIdNod(parser.contador++);
    tmp.setValor(numDecimal);
    RESULT=tmp;

  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE_NUMERICA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // EXPRE_NUMERICA ::= entero 
            {
              Object RESULT =null;
		int numEnteroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numEnteroright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String numEntero = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    parser.ValoresNumericos.add(numEntero); 

    Nodo tmp = new Nodo("ENTERO");
    tmp.setIdNod(parser.contador++);
    tmp.setValor(numEntero);
    RESULT=tmp;

  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE_NUMERICA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // EXPRE_NUMERICA ::= parizq EXPRE_NUMERICA parder 
            {
              Object RESULT =null;
		
  		parser.Simbolo.add(" ( "); parser.Simbolo.add(" ) ");

  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE_NUMERICA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= rif parizq EXPRE_LOGICA parder llavizq INSTRUCCIONES llavder relse llavizq INSTRUCCIONES llavder 
            {
              Object RESULT =null;
		int iffleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int iffright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String iff = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int logicaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int logicaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object logica = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int nd1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nd1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object nd1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int elseeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int elseeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String elsee = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nd2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nd2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object nd2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		

 	  parser.PalabraReservada.add(iff); parser.PalabraReservada.add(elsee); parser.Simbolo.add(" ( "); parser.Simbolo.add(" ) "); parser.Simbolo.add(" { "); parser.Simbolo.add(" } ");

      Nodo nd = new Nodo("CONDICIONAL_SI_NO");
      nd.setValor(" if ");
      
      Nodo para = new Nodo("Simbolo");
      para.setValor(" ( ");
      para.setIdNod(parser.contador++);

      Nodo parc = new Nodo("Simbolo");
      parc.setValor(" ) ");
      parc.setIdNod(parser.contador++);

      Nodo lla = new Nodo("Simbolo");
      lla.setValor(" { ");
      lla.setIdNod(parser.contador++);

      Nodo llc = new Nodo("Simbolo");
      llc.setValor(" } ");
      llc.setIdNod(parser.contador++);

      
      
      nd.AddHijos((Nodo) para);
      nd.AddHijos((Nodo) logica);
      nd.AddHijos((Nodo) parc);
      nd.AddHijos((Nodo) lla);
      nd.AddHijos((Nodo) nd1);
      nd.AddHijos((Nodo) llc);

      Nodo ndE = new Nodo("ELSE");
      ndE.setValor(" else ");
      nd.AddHijos((Nodo) ndE);

      
      Nodo lla2 = new Nodo("Simbolo");
      lla2.setValor(" { ");
      lla2.setIdNod(parser.contador++);

      Nodo llc2 = new Nodo("Simbolo");
      llc2.setValor(" } ");
      llc2.setIdNod(parser.contador++);

            
      ndE.AddHijos((Nodo) lla2);
      ndE.AddHijos((Nodo) nd2);
      ndE.AddHijos((Nodo) llc2);

      ndE.setIdNod(parser.contador++);
      nd.setIdNod(parser.contador++);

      RESULT = nd;

 	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= rif parizq EXPRE_LOGICA parder llavizq INSTRUCCIONES llavder 
            {
              Object RESULT =null;
		int iffleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iffright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String iff = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int logicaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int logicaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object logica = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nd1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nd1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object nd1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		

   	  parser.PalabraReservada.add(iff); parser.Simbolo.add(" ( "); parser.Simbolo.add(" ) "); parser.Simbolo.add(" { "); parser.Simbolo.add(" } ");

      Nodo nd = new Nodo("CONDICIONAL");
      nd.setValor(" if ");
      
      Nodo para = new Nodo("Simbolo");
      para.setValor(" ( ");
      para.setIdNod(parser.contador++);

      Nodo parc = new Nodo("Simbolo");
      parc.setValor(" ) ");
      parc.setIdNod(parser.contador++);

      Nodo lla = new Nodo("Simbolo");
      lla.setValor(" { ");
      lla.setIdNod(parser.contador++);

      Nodo llc = new Nodo("Simbolo");
      llc.setValor(" } ");
      llc.setIdNod(parser.contador++);

      
      
      nd.AddHijos((Nodo) para);
      nd.AddHijos((Nodo) logica);
      nd.AddHijos((Nodo) parc);
      nd.AddHijos((Nodo) lla);
      nd.AddHijos((Nodo) nd1);
      nd.AddHijos((Nodo) llc);

      nd.setIdNod(parser.contador++);

      RESULT = nd;

 	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= rmientras parizq EXPRE_LOGICA parder llavizq INSTRUCCIONES llavder 
            {
              Object RESULT =null;
		int mientrasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int mientrasright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String mientras = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int logicaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int logicaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object logica = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nd1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nd1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object nd1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		

 	  parser.PalabraReservada.add(mientras); parser.Simbolo.add(" ( "); parser.Simbolo.add(" ) "); parser.Simbolo.add(" ; "); parser.Simbolo.add(" { "); parser.Simbolo.add(" } ");

      Nodo nd = new Nodo("CICLO");
      nd.setValor(" while ");
      
      Nodo para = new Nodo("Simbolo");
      para.setValor(" ( ");
      para.setIdNod(parser.contador++);

      Nodo parc = new Nodo("Simbolo");
      parc.setValor(" ) ");
      parc.setIdNod(parser.contador++);

      Nodo lla = new Nodo("Simbolo");
      lla.setValor(" { ");
      lla.setIdNod(parser.contador++);

      Nodo llc = new Nodo("Simbolo");
      llc.setValor(" } ");
      llc.setIdNod(parser.contador++);

      
      
      nd.AddHijos((Nodo) para);
      nd.AddHijos((Nodo) logica);
      nd.AddHijos((Nodo) parc);
      nd.AddHijos((Nodo) lla);
      nd.AddHijos((Nodo) nd1);
      nd.AddHijos((Nodo) llc);

      nd.setIdNod(parser.contador++);

      RESULT = nd;

 	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= rimprimir parizq EXPRE_CADENA parder ptcoma 
            {
              Object RESULT =null;
		int imprimirleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int imprimirright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String imprimir = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nd1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nd1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object nd1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		

   	  parser.PalabraReservada.add(imprimir); parser.Simbolo.add(" ( "); parser.Simbolo.add(" ) "); parser.Simbolo.add(" ; ");

      Nodo nd = new Nodo("IMPRIMIR");
      nd.setValor(" imprimir ");
      
      Nodo sim = new Nodo("Simbolo");
      sim.setValor(" ; ");
      sim.setIdNod(parser.contador++);

      Nodo para = new Nodo("Simbolo");
      para.setValor(" ( ");
      para.setIdNod(parser.contador++);

      Nodo parc = new Nodo("Simbolo");
      parc.setValor(" ) ");
      parc.setIdNod(parser.contador++);

      
      nd.AddHijos((Nodo) para);
      nd.AddHijos((Nodo) nd1);
      nd.AddHijos((Nodo) parc);
      nd.AddHijos((Nodo) sim);

      nd.setIdNod(parser.contador++);
      
      RESULT=nd;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              Object RESULT =null;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Nodo tmp = new Nodo("INSTRUCCION");
    tmp.setValor(" Instruccion ");
    tmp.setIdNod(parser.contador++);
    tmp.AddHijos((Nodo) s2);

    System.out.println("NODOS RAIZ tmp: "+tmp.Etiqueta);
    System.out.println("NODOS RAIZ s2: "+ ((Nodo)s2).getHijos());

    RESULT=tmp;

  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              Object RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Nodo tmp = new Nodo("INSTRUCCIONES");
    tmp.setValor(" Lista_Instrucciones ");
    tmp.setIdNod(parser.contador++);
    tmp.AddHijos((Nodo) s1);
    tmp.AddHijos((Nodo) s2);

    System.out.println("NODOS RAIZ tmp: "+tmp.Etiqueta);
    System.out.println("NODOS RAIZ s2: "+ ((Nodo)s2).getHijos());
    RESULT=tmp;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INI ::= INSTRUCCIONES 
            {
              Object RESULT =null;
		int instrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object instr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

    Nodo nd = new Nodo("INICIO");
    nd.setIdNod(parser.contador++);
    nd.AddHijos((Nodo) instr);
    parser.padre = (Nodo) nd;

      System.out.println("------------*************----------------");
      System.out.println("Compilacion exitosa!");
      System.out.println("------------*************----------------");

    RESULT = instr;
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INI",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INI EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

